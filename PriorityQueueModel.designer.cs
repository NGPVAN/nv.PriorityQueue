#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace nv.PriorityQueue
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QueueDemo")]
	public partial class PriorityQueueModel : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertType(Type instance);
    partial void UpdateType(Type instance);
    partial void DeleteType(Type instance);
    #endregion
		
		public PriorityQueueModel() : 
				base(global::nv.PriorityQueue.Properties.Settings.Default.QueueDemoConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PriorityQueueModel(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PriorityQueueModel(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PriorityQueueModel(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PriorityQueueModel(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Type> Types
		{
			get
			{
				return this.GetTable<Type>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="jobs.usp_Dequeue")]
		public ISingleResult<usp_DequeueResult> usp_Dequeue()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<usp_DequeueResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="jobs.usp_Enqueue")]
		public int usp_Enqueue([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Payload", DbType="VarChar(MAX)")] string payload, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Type", DbType="VarChar(256)")] string type, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TenantId", DbType="SmallInt")] System.Nullable<short> tenantId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PrincipalId", DbType="SmallInt")] System.Nullable<short> principalId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Priority", DbType="TinyInt")] System.Nullable<byte> priority)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), payload, type, tenantId, principalId, priority);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="jobs.Type")]
	public partial class Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Type()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class usp_DequeueResult
	{
		
		private long _Id;
		
		private short _TenantId;
		
		private string _Payload;
		
		private byte _Priority;
		
		public usp_DequeueResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt NOT NULL")]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantId", DbType="SmallInt NOT NULL")]
		public short TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this._TenantId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payload", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Payload
		{
			get
			{
				return this._Payload;
			}
			set
			{
				if ((this._Payload != value))
				{
					this._Payload = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="TinyInt NOT NULL")]
		public byte Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this._Priority = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
